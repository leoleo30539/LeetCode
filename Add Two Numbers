# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        carry = 0
        node1 = l1
        node2 = l2
        ans, carry = self.add(node1, node2, carry)
        current = ans
        node1 = node1.next
        node2 = node2.next
        while node1 or node2:
            if node1 and node2:
                current.next, carry = self.add(node1, node2, carry)
                node1 = node1.next
                node2 = node2.next
                current = current.next
            elif not node1 and node2:
                current.next, carry = self.add(node1, node2, carry)
                node2 = node2.next
                current = current.next
            elif node1 and not node2:
                current.next, carry = self.add(node1, node2, carry)
                node1 = node1.next
                current = current.next
        if carry:
            current.next, carry = self.add(node1, node2, carry)
        return ans
    
    def add(self, node1, node2, carry):
        if node1 and node2:
            sums = (carry + node1.val + node2.val) % 10
            carry = (carry + node1.val + node2.val) / 10
        elif not node1 and node2:
            sums = (carry + node2.val) % 10
            carry = (carry + node2.val) / 10
        elif node1 and not node2:
            sums = (carry + node1.val) % 10
            carry = (carry + node1.val) / 10
        else:
            sums = carry
            carry = 0
        return ListNode(sums) , carry
